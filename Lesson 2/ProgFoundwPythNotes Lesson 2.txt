20150820 2033CST

20150821 013CST
Lesson 1: Functions
Lesson 2: Using Classes
Lesson 3: Making Classes

Lesson 1: Functions

Writing a program that schedules breaks through the day. 
Keeps track of time and every 2 hours of work it opens a browser to play favorite song.
After another 2 hours, prompts another break, etc.

20150821 016CST
What are the steps?

**Init and import clock libraries**, **browser libraries**, **opening browsers capabilities**.

##Time tracker function
Track Time using Clock Import Library
init Time Since Last Song Played counter
if Time since last Song Played >= 2 hrs
Do Browser Opener Function
Do Song Player Once Browser Is Open Function
Reset Time Since last Song Played counter
Loop

##Browser Opener Function
Use **Opening Browsers Capabilities library** to open browser on computer

##Song Player Once Browser Is Open Function
Use browser libraries to navigate to youtube page containing favorite song
Each Random # of times b/w 1-10, Rickroll them instead.

20150821 021CST

Submitted the above to discussion forum. Updated with markdown and edits to Time Tracker Function.
https://discussions.udacity.com/t/planning-the-break-f/16129/1224?u=pscheyer

20150821 849CST
working on the class stuff. Video is asking what I think the problem is when idle says 
[code python]
NameError: name 'webbrowser' is not defined
[/code]

I think it means that python doesn't know how to use webbrowser because it requires some sort of library to have been imported first that defines webbrowser.

Yup, they want us to add an import command. So our program is like this:
[code python]
import webbrowser
>>> webbrowser.open("http://www.youtube.com/watch?v=dQw4w9WgXcQ")
[/code]
20150821 855CST

That runs okay. Rickrolls me. 

20150821 858CST
now we're adding the 'wait' function. The guy defined his program as

Repeat 3 times
wait 2 hrs
open browser

Which is simpler. We've already managed Open Browser. 
Now he googles 'python make my program wait', heads to the stackoverflow link, and it provides

[code python]
time.sleep(0.2)
[/code]

We also need to import the time module. So our current program is:
[code python]
import time
import webbrowser

time.sleep(10)
webbrowser.open("http://www.youtube.com/watch?v=dQw4w9WgXcQ")
[/code]

20150821 924CST
That didn't run. Troubleshot it for a while and discovered that [code python]
time.sleep(10) [/code] needs to be [code python] time.sleep(10.0) [/code] to work properly.
Next step is to add the loop. 

Think i managed it, with

[code python]
import time
import webbrowser

i = 1
if (i<3):
    time.sleep(10.0)
    webbrowser.open("http://www.youtube.com/watch?v=dQw4w9WgXcQ")
    i + 1
[/code]

Required some googling to work out how to handle the if statements, my first try at the [code python]
i + 1 [/code] was [code python] i++ [/code]. That didn't work. 

20150821 936CST
Now I'm rickrolling myself every 10s. How grand. Used a for loop. 
[code python]
import time
import webbrowser

for x in xrange(3):
    time.sleep(10.0)
    webbrowser.open("http://www.youtube.com/watch?v=dQw4w9WgXcQ")
    print x
[/code]
20150821 937CST

They initialize a total breaks count at 3 and initialize a break_count at 0, then use a while loop.

[code python]
import time
import webbrowser

total_breaks = 3
break_count = 0

while(break_count < total_breaks):
    time.sleep(10.0)
    webbrowser.open("http://www.youtube.com/watch?v=dQw4w9WgXcQ")
    print x
    break_count = break_count + 1
[/code]

20150821 1011CST
adding a line stating [code python]
print("This program started on "+time.ctime())
[/code]

also they tested the time.ctime() function in the output window, which has been displaying things like [code python]
>>> ================================ RESTART ================================
>>> 
0
1
2
>>> 
[/code]

we can test 
[code python]
>>> import time
>>> time.ctime
<built-in function ctime>
>>> 
[/code]

time.ctime needs () at the end.
[code python]
>>> import time
>>> time.ctime()
'Fri Aug 21 10:15:04 2015'
>>> [/code]

20150821 1015CST
20150821 1031CST
how to quit the window: restart IDLE or use ctrl-c
Sleep Functions work in seconds, so multiply for your 2 hrs. 10x60 (mins) x60 (hrs), x2 (2 hrs). Not gonna do that.

We're learning about the Python Standard Library and other libraries.

Abstraction is defined as the hiding of detail in programming. 
20150821 1044CST

Now we're checking the python standard library for documentation. [python standard library 2.7.10](https://docs.python.org/2/library/)
scrolled down to **webbrowser** 
says the webbrowser module provides a high-level interface to allow displaying web-based documents to users. So it shows websites. It's got webbrowser.open which takes a url and displays that url using the system's default browser.

20150822 1201CST
mkay, in the next section they want us to teach this code to someone else. I'm not going to do that. I will ping Lucas to hit me up when he gets to that section.

20150822 1203CST
Pinged him accordingly.

20150822 1648CST
more examples of functions. We're seeing a program that removes the numbers from filenames. We're to write the steps for a program that does this.

20150823 1050CST
Met with Lucas and discussed documentation 

Docs for Python: 
webbrowser.open - https://docs.python.org/2/library/webbrowser.html

Compared to Apple docs (incomprehensible) for NSArray-
https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/index.html

20150828 043CST
steps for program that removes numbers from filename:
select directory/move to proper location
Make list of files to be modified
select first file
select filename of first file
	Function- remove # from string
	iterate over string (filename)
		if item is a number
			remove
		elseif
			next item
	continue until end of filename (use a length counter and shorten it as each item is examined)
select filename of next file
	function- remove # from string
repeat until all filenames have been modified.





 